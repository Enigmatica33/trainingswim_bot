import logging
import random
import sys

import requests
from telebot import TeleBot, types

from config import ENDPOINT, TELEGRAM_BOT_TOKEN
from constants import (
    COOLDOWN,
    COOLDOWN_DISTANCE,
    HELLO,
    LEVEL_PARAMETERS
)
from exceptions import MissingTokens
from logic import find_combinations
from saving_pdf import create_pdf_from_text


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.propagate = False
if not logger.handlers:
    handler = logging.StreamHandler(stream=sys.stdout)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

swimming_bot = TeleBot(token=TELEGRAM_BOT_TOKEN)


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    token_list = ['ENDPOINT', 'TELEGRAM_BOT_TOKEN']
    missing_tokens = [token for token in token_list if not globals()[token]]
    if missing_tokens:
        message_error = ('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: '
                         f'{",".join(missing_tokens)}')
        logger.critical(message_error)
        raise MissingTokens(message_error)


def load_trainings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info(f'–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ {ENDPOINT}...')
    try:
        trainings = requests.get(ENDPOINT).json()
        warmup = [
            task for task in trainings if task['task_type'] == '—Ä–∞–∑–º–∏–Ω–∫–∞'
        ]
        main = [
            task for task in trainings if task['task_type'] not in (
                '—Ä–∞–∑–º–∏–Ω–∫–∞',
                '–∑–∞–º–∏–Ω–∫–∞'
            )
        ]
        logger.info('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.')
        return warmup, main
    except requests.exceptions.RequestException as e:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}')
        raise SystemExit(
            '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.'
        )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
        raise SystemExit('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.')


@swimming_bot.message_handler(commands=['start'])
def say_hello(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ /start)."""
    chat_id = message.chat.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_new_training = types.KeyboardButton('–•–æ—á—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üèäüèª')
    keyboard.add(button_new_training)
    swimming_bot.send_message(
        chat_id,
        text=f'{HELLO}, {message.chat.first_name}!',
        reply_markup=keyboard
    )


def create_keyboard_for_checking_level():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton('–ù–æ–≤–∏—á–æ–∫'),
        types.KeyboardButton('–û–ø—ã—Ç–Ω—ã–π'),
        types.KeyboardButton('–ü—Ä–æ—Ñ–∏')
    )
    return keyboard


def create_keyboard_for_saving_file():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    inline_keyboard = types.InlineKeyboardMarkup()
    save_file_btn = types.InlineKeyboardButton(
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ .pdf',
        callback_data='save'
    )
    inline_keyboard.add(save_file_btn)
    return inline_keyboard


def get_design_message(warmup_level, main_level):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π."""
    result = []
    result.extend(warmup_level['texts'])
    result.append('----------------')
    result.extend(main_level['texts'])
    result.append('----------------')
    result.append(COOLDOWN)
    total_distance = (
        warmup_level['total_distance']
        + main_level['total_distance']
        + COOLDOWN_DISTANCE
    )
    result.append('----------------')
    result.append(f'–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è {total_distance} –º')
    result_message = '\n'.join(result)
    return result_message


def send_training_for_level(chat_id, params):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è."""
    warmup_part = random.choice(find_combinations(
        warmup_tasks,
        params['min_warmup'],
        params['max_warmup']
    ))
    main_part = random.choice(find_combinations(
        main_tasks,
        params['min_main'],
        params['max_main']
    ))

    result_message = get_design_message(warmup_part, main_part)
    inline_keyboard = create_keyboard_for_saving_file()

    swimming_bot.send_message(
        chat_id,
        text=f'{result_message} \n',
        reply_markup=inline_keyboard
    )


@swimming_bot.message_handler(content_types=['text'])
def get_train_parameters(message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.
    """
    chat_id = message.chat.id
    user_choice = message.text
    user = message.from_user

    if user_choice in LEVEL_PARAMETERS:
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å '
            f'"{user_choice}". –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.'
        )
        level_params = LEVEL_PARAMETERS[user_choice]
        send_training_for_level(chat_id, level_params)
    else:
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} '
            f'(ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É '
            f'(—Ç–µ–∫—Å—Ç: "{user_choice}"). '
        )
        keyboard = create_keyboard_for_checking_level()
        swimming_bot.send_message(
            chat_id,
            text='–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ –ø–ª–∞–≤–∞–Ω–∏–∏:',
            reply_markup=keyboard
        )


@swimming_bot.callback_query_handler(func=lambda call: True)
def handle_saving_file_btn(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ pdf."""
    user = call.from_user
    swimming_bot.answer_callback_query(call.id)
    if call.data == 'save':
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –Ω–∞–∂–∞–ª '
            f'–∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ .pdf".'
        )
        text_for_pdf = call.message.text
        pdf_buffer = create_pdf_from_text(text_for_pdf)

        if pdf_buffer:
            swimming_bot.send_document(
                chat_id=call.message.chat.id,
                document=('swim_training.pdf', pdf_buffer.getvalue()),
                caption='–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF'
            )
            logger.info(
                f'PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) '
                '—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.'
            )
        else:
            logger.warning(
                f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} '
                f'(ID: {user.id}).'
            )
            swimming_bot.send_message(
                call.message.chat.id,
                '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª.'
            )


if __name__ == '__main__':
    check_tokens()
    warmup_tasks, main_tasks = load_trainings()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    swimming_bot.polling(none_stop=True)
